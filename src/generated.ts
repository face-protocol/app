// Generated by @wagmi/cli@1.3.0 on 8/12/2023 at 6:25:54 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Community
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const communityABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'approver',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'applicant',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ApplicatonApproval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'applicant',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DepositWithdrawal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'oldValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberReputationChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'applicant',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'dataURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'NewApplication',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'member',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'NewMembership',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TotalReputationChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CLOCK_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DENOMINATOR',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PROTOCOL_FEE',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'applications',
    outputs: [
      { name: 'dataURI', internalType: 'string', type: 'string' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'votesFor', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'dataURI', internalType: 'string', type: 'string' }],
    name: 'applyForMembership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'applicant', internalType: 'address', type: 'address' }],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'clock',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'member', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateReputation',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'delegatedFromTo',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [
      { name: '', internalType: 'contract ICommunityFactory', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'info',
        internalType: 'struct ICommunity.CommunityInfo',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'symbol', internalType: 'string', type: 'string' },
          { name: 'rulesURI', internalType: 'string', type: 'string' },
          {
            name: 'membershipDeposit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'membershipVotesThreshold',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'votingDuration', internalType: 'uint256', type: 'uint256' },
          {
            name: 'initialMembers',
            internalType: 'address[]',
            type: 'address[]',
          },
        ],
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'membershipDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'membershipVotesThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nextTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'member', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pastReputationOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'member', internalType: 'address', type: 'address' }],
    name: 'reputationOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'member', internalType: 'address', type: 'address' }],
    name: 'revokeReputation',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rulesURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'startMembership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'totalPastReputation',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalReputation',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'unusedDepositOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'applicant', internalType: 'address', type: 'address' }],
    name: 'withdrawUnusedDeposit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CommunityFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const communityFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_communityImplementation',
        internalType: 'address',
        type: 'address',
      },
      { name: '_treasury', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'community',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'NewCommunity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newTreasury',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'TreasuryUpdate',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'communityImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'info',
        internalType: 'struct ICommunity.CommunityInfo',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'symbol', internalType: 'string', type: 'string' },
          { name: 'rulesURI', internalType: 'string', type: 'string' },
          {
            name: 'membershipDeposit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'membershipVotesThreshold',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'votingDuration', internalType: 'uint256', type: 'uint256' },
          {
            name: 'initialMembers',
            internalType: 'address[]',
            type: 'address[]',
          },
        ],
      },
    ],
    name: 'createCommunity',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newTreasury', internalType: 'address', type: 'address' }],
    name: 'setTreasury',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICommunity
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iCommunityABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'dataURI', internalType: 'string', type: 'string' }],
    name: 'applyForMembership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'applicant', internalType: 'address', type: 'address' }],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'member', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateReputation',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'info',
        internalType: 'struct ICommunity.CommunityInfo',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'symbol', internalType: 'string', type: 'string' },
          { name: 'rulesURI', internalType: 'string', type: 'string' },
          {
            name: 'membershipDeposit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'membershipVotesThreshold',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'votingDuration', internalType: 'uint256', type: 'uint256' },
          {
            name: 'initialMembers',
            internalType: 'address[]',
            type: 'address[]',
          },
        ],
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'membershipDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'membershipVotesThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'member', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pastReputationOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'member', internalType: 'address', type: 'address' }],
    name: 'reputationOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'member', internalType: 'address', type: 'address' }],
    name: 'revokeReputation',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rulesURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'startMembership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'totalPastReputation',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalReputation',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'applicant', internalType: 'address', type: 'address' }],
    name: 'withdrawUnusedDeposit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICommunityFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iCommunityFactoryABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'info',
        internalType: 'struct ICommunity.CommunityInfo',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'symbol', internalType: 'string', type: 'string' },
          { name: 'rulesURI', internalType: 'string', type: 'string' },
          {
            name: 'membershipDeposit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'membershipVotesThreshold',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'votingDuration', internalType: 'uint256', type: 'uint256' },
          {
            name: 'initialMembers',
            internalType: 'address[]',
            type: 'address[]',
          },
        ],
      },
    ],
    name: 'createCommunity',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165UpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721MetadataUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721ReceiverUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__.
 */
export function useCommunityRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"CLOCK_MODE"`.
 */
export function useCommunityClockMode<
  TFunctionName extends 'CLOCK_MODE',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'CLOCK_MODE',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"DENOMINATOR"`.
 */
export function useCommunityDenominator<
  TFunctionName extends 'DENOMINATOR',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'DENOMINATOR',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"PROTOCOL_FEE"`.
 */
export function useCommunityProtocolFee<
  TFunctionName extends 'PROTOCOL_FEE',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'PROTOCOL_FEE',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"applications"`.
 */
export function useCommunityApplications<
  TFunctionName extends 'applications',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'applications',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCommunityBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"clock"`.
 */
export function useCommunityClock<
  TFunctionName extends 'clock',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'clock',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"delegatedFromTo"`.
 */
export function useCommunityDelegatedFromTo<
  TFunctionName extends 'delegatedFromTo',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'delegatedFromTo',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"factory"`.
 */
export function useCommunityFactory<
  TFunctionName extends 'factory',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"getApproved"`.
 */
export function useCommunityGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useCommunityHasVoted<
  TFunctionName extends 'hasVoted',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useCommunityIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"membershipDeposit"`.
 */
export function useCommunityMembershipDeposit<
  TFunctionName extends 'membershipDeposit',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'membershipDeposit',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"membershipVotesThreshold"`.
 */
export function useCommunityMembershipVotesThreshold<
  TFunctionName extends 'membershipVotesThreshold',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'membershipVotesThreshold',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"name"`.
 */
export function useCommunityName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"nextTokenId"`.
 */
export function useCommunityNextTokenId<
  TFunctionName extends 'nextTokenId',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'nextTokenId',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useCommunityOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"pastReputationOf"`.
 */
export function useCommunityPastReputationOf<
  TFunctionName extends 'pastReputationOf',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'pastReputationOf',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"reputationOf"`.
 */
export function useCommunityReputationOf<
  TFunctionName extends 'reputationOf',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'reputationOf',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"rulesURI"`.
 */
export function useCommunityRulesUri<
  TFunctionName extends 'rulesURI',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'rulesURI',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCommunitySupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"symbol"`.
 */
export function useCommunitySymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useCommunityTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"totalPastReputation"`.
 */
export function useCommunityTotalPastReputation<
  TFunctionName extends 'totalPastReputation',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'totalPastReputation',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"totalReputation"`.
 */
export function useCommunityTotalReputation<
  TFunctionName extends 'totalReputation',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'totalReputation',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"unusedDepositOf"`.
 */
export function useCommunityUnusedDepositOf<
  TFunctionName extends 'unusedDepositOf',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'unusedDepositOf',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"votingDuration"`.
 */
export function useCommunityVotingDuration<
  TFunctionName extends 'votingDuration',
  TSelectData = ReadContractResult<typeof communityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityABI,
    functionName: 'votingDuration',
    ...config,
  } as UseContractReadConfig<typeof communityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityABI}__.
 */
export function useCommunityWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof communityABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof communityABI, TFunctionName, TMode>({
    abi: communityABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"applyForMembership"`.
 */
export function useCommunityApplyForMembership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityABI,
          'applyForMembership'
        >['request']['abi'],
        'applyForMembership',
        TMode
      > & { functionName?: 'applyForMembership' }
    : UseContractWriteConfig<
        typeof communityABI,
        'applyForMembership',
        TMode
      > & {
        abi?: never
        functionName?: 'applyForMembership'
      } = {} as any,
) {
  return useContractWrite<typeof communityABI, 'applyForMembership', TMode>({
    abi: communityABI,
    functionName: 'applyForMembership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"approve"`.
 */
export function useCommunityApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof communityABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof communityABI, 'approve', TMode>({
    abi: communityABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"delegateReputation"`.
 */
export function useCommunityDelegateReputation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityABI,
          'delegateReputation'
        >['request']['abi'],
        'delegateReputation',
        TMode
      > & { functionName?: 'delegateReputation' }
    : UseContractWriteConfig<
        typeof communityABI,
        'delegateReputation',
        TMode
      > & {
        abi?: never
        functionName?: 'delegateReputation'
      } = {} as any,
) {
  return useContractWrite<typeof communityABI, 'delegateReputation', TMode>({
    abi: communityABI,
    functionName: 'delegateReputation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"initialize"`.
 */
export function useCommunityInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof communityABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof communityABI, 'initialize', TMode>({
    abi: communityABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"revokeReputation"`.
 */
export function useCommunityRevokeReputation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityABI,
          'revokeReputation'
        >['request']['abi'],
        'revokeReputation',
        TMode
      > & { functionName?: 'revokeReputation' }
    : UseContractWriteConfig<typeof communityABI, 'revokeReputation', TMode> & {
        abi?: never
        functionName?: 'revokeReputation'
      } = {} as any,
) {
  return useContractWrite<typeof communityABI, 'revokeReputation', TMode>({
    abi: communityABI,
    functionName: 'revokeReputation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useCommunitySafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof communityABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof communityABI, 'safeTransferFrom', TMode>({
    abi: communityABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useCommunitySetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof communityABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof communityABI, 'setApprovalForAll', TMode>({
    abi: communityABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"startMembership"`.
 */
export function useCommunityStartMembership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityABI,
          'startMembership'
        >['request']['abi'],
        'startMembership',
        TMode
      > & { functionName?: 'startMembership' }
    : UseContractWriteConfig<typeof communityABI, 'startMembership', TMode> & {
        abi?: never
        functionName?: 'startMembership'
      } = {} as any,
) {
  return useContractWrite<typeof communityABI, 'startMembership', TMode>({
    abi: communityABI,
    functionName: 'startMembership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useCommunityTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof communityABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof communityABI, 'transferFrom', TMode>({
    abi: communityABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"withdrawUnusedDeposit"`.
 */
export function useCommunityWithdrawUnusedDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityABI,
          'withdrawUnusedDeposit'
        >['request']['abi'],
        'withdrawUnusedDeposit',
        TMode
      > & { functionName?: 'withdrawUnusedDeposit' }
    : UseContractWriteConfig<
        typeof communityABI,
        'withdrawUnusedDeposit',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawUnusedDeposit'
      } = {} as any,
) {
  return useContractWrite<typeof communityABI, 'withdrawUnusedDeposit', TMode>({
    abi: communityABI,
    functionName: 'withdrawUnusedDeposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityABI}__.
 */
export function usePrepareCommunityWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof communityABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof communityABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"applyForMembership"`.
 */
export function usePrepareCommunityApplyForMembership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof communityABI, 'applyForMembership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityABI,
    functionName: 'applyForMembership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof communityABI, 'applyForMembership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareCommunityApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof communityABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof communityABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"delegateReputation"`.
 */
export function usePrepareCommunityDelegateReputation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof communityABI, 'delegateReputation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityABI,
    functionName: 'delegateReputation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof communityABI, 'delegateReputation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareCommunityInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof communityABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof communityABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"revokeReputation"`.
 */
export function usePrepareCommunityRevokeReputation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof communityABI, 'revokeReputation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityABI,
    functionName: 'revokeReputation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof communityABI, 'revokeReputation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareCommunitySafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof communityABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof communityABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareCommunitySetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof communityABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof communityABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"startMembership"`.
 */
export function usePrepareCommunityStartMembership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof communityABI, 'startMembership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityABI,
    functionName: 'startMembership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof communityABI, 'startMembership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareCommunityTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof communityABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof communityABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityABI}__ and `functionName` set to `"withdrawUnusedDeposit"`.
 */
export function usePrepareCommunityWithdrawUnusedDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof communityABI, 'withdrawUnusedDeposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityABI,
    functionName: 'withdrawUnusedDeposit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof communityABI,
    'withdrawUnusedDeposit'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityABI}__.
 */
export function useCommunityEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof communityABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityABI,
    ...config,
  } as UseContractEventConfig<typeof communityABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityABI}__ and `eventName` set to `"ApplicatonApproval"`.
 */
export function useCommunityApplicatonApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof communityABI, 'ApplicatonApproval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityABI,
    eventName: 'ApplicatonApproval',
    ...config,
  } as UseContractEventConfig<typeof communityABI, 'ApplicatonApproval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityABI}__ and `eventName` set to `"Approval"`.
 */
export function useCommunityApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof communityABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof communityABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useCommunityApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof communityABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof communityABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityABI}__ and `eventName` set to `"DepositWithdrawal"`.
 */
export function useCommunityDepositWithdrawalEvent(
  config: Omit<
    UseContractEventConfig<typeof communityABI, 'DepositWithdrawal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityABI,
    eventName: 'DepositWithdrawal',
    ...config,
  } as UseContractEventConfig<typeof communityABI, 'DepositWithdrawal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityABI}__ and `eventName` set to `"Initialized"`.
 */
export function useCommunityInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof communityABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof communityABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityABI}__ and `eventName` set to `"MemberReputationChange"`.
 */
export function useCommunityMemberReputationChangeEvent(
  config: Omit<
    UseContractEventConfig<typeof communityABI, 'MemberReputationChange'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityABI,
    eventName: 'MemberReputationChange',
    ...config,
  } as UseContractEventConfig<typeof communityABI, 'MemberReputationChange'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityABI}__ and `eventName` set to `"NewApplication"`.
 */
export function useCommunityNewApplicationEvent(
  config: Omit<
    UseContractEventConfig<typeof communityABI, 'NewApplication'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityABI,
    eventName: 'NewApplication',
    ...config,
  } as UseContractEventConfig<typeof communityABI, 'NewApplication'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityABI}__ and `eventName` set to `"NewMembership"`.
 */
export function useCommunityNewMembershipEvent(
  config: Omit<
    UseContractEventConfig<typeof communityABI, 'NewMembership'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityABI,
    eventName: 'NewMembership',
    ...config,
  } as UseContractEventConfig<typeof communityABI, 'NewMembership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityABI}__ and `eventName` set to `"TotalReputationChange"`.
 */
export function useCommunityTotalReputationChangeEvent(
  config: Omit<
    UseContractEventConfig<typeof communityABI, 'TotalReputationChange'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityABI,
    eventName: 'TotalReputationChange',
    ...config,
  } as UseContractEventConfig<typeof communityABI, 'TotalReputationChange'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCommunityTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof communityABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof communityABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityFactoryABI}__.
 */
export function useCommunityFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof communityFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof communityFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: communityFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof communityFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityFactoryABI}__ and `functionName` set to `"communityImplementation"`.
 */
export function useCommunityFactoryCommunityImplementation<
  TFunctionName extends 'communityImplementation',
  TSelectData = ReadContractResult<typeof communityFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof communityFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityFactoryABI,
    functionName: 'communityImplementation',
    ...config,
  } as UseContractReadConfig<
    typeof communityFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityFactoryABI}__ and `functionName` set to `"owner"`.
 */
export function useCommunityFactoryOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof communityFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof communityFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityFactoryABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof communityFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link communityFactoryABI}__ and `functionName` set to `"treasury"`.
 */
export function useCommunityFactoryTreasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<typeof communityFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof communityFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: communityFactoryABI,
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<
    typeof communityFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityFactoryABI}__.
 */
export function useCommunityFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof communityFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof communityFactoryABI, TFunctionName, TMode>({
    abi: communityFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityFactoryABI}__ and `functionName` set to `"createCommunity"`.
 */
export function useCommunityFactoryCreateCommunity<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityFactoryABI,
          'createCommunity'
        >['request']['abi'],
        'createCommunity',
        TMode
      > & { functionName?: 'createCommunity' }
    : UseContractWriteConfig<
        typeof communityFactoryABI,
        'createCommunity',
        TMode
      > & {
        abi?: never
        functionName?: 'createCommunity'
      } = {} as any,
) {
  return useContractWrite<typeof communityFactoryABI, 'createCommunity', TMode>(
    {
      abi: communityFactoryABI,
      functionName: 'createCommunity',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCommunityFactoryRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityFactoryABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof communityFactoryABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof communityFactoryABI,
    'renounceOwnership',
    TMode
  >({
    abi: communityFactoryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityFactoryABI}__ and `functionName` set to `"setTreasury"`.
 */
export function useCommunityFactorySetTreasury<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityFactoryABI,
          'setTreasury'
        >['request']['abi'],
        'setTreasury',
        TMode
      > & { functionName?: 'setTreasury' }
    : UseContractWriteConfig<
        typeof communityFactoryABI,
        'setTreasury',
        TMode
      > & {
        abi?: never
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<typeof communityFactoryABI, 'setTreasury', TMode>({
    abi: communityFactoryABI,
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link communityFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCommunityFactoryTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof communityFactoryABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof communityFactoryABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof communityFactoryABI,
    'transferOwnership',
    TMode
  >({
    abi: communityFactoryABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityFactoryABI}__.
 */
export function usePrepareCommunityFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof communityFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof communityFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityFactoryABI}__ and `functionName` set to `"createCommunity"`.
 */
export function usePrepareCommunityFactoryCreateCommunity(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof communityFactoryABI,
      'createCommunity'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityFactoryABI,
    functionName: 'createCommunity',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof communityFactoryABI,
    'createCommunity'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCommunityFactoryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof communityFactoryABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityFactoryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof communityFactoryABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityFactoryABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePrepareCommunityFactorySetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<typeof communityFactoryABI, 'setTreasury'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityFactoryABI,
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<typeof communityFactoryABI, 'setTreasury'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link communityFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCommunityFactoryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof communityFactoryABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: communityFactoryABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof communityFactoryABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityFactoryABI}__.
 */
export function useCommunityFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof communityFactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof communityFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityFactoryABI}__ and `eventName` set to `"NewCommunity"`.
 */
export function useCommunityFactoryNewCommunityEvent(
  config: Omit<
    UseContractEventConfig<typeof communityFactoryABI, 'NewCommunity'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityFactoryABI,
    eventName: 'NewCommunity',
    ...config,
  } as UseContractEventConfig<typeof communityFactoryABI, 'NewCommunity'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityFactoryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCommunityFactoryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof communityFactoryABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityFactoryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof communityFactoryABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link communityFactoryABI}__ and `eventName` set to `"TreasuryUpdate"`.
 */
export function useCommunityFactoryTreasuryUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof communityFactoryABI, 'TreasuryUpdate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: communityFactoryABI,
    eventName: 'TreasuryUpdate',
    ...config,
  } as UseContractEventConfig<typeof communityFactoryABI, 'TreasuryUpdate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc165UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useContextUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721UpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721UpgradeableGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721UpgradeableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721UpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721UpgradeableOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721UpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721UpgradeableTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721UpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc721UpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc721UpgradeableABI, TFunctionName, TMode>({
    abi: erc721UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721UpgradeableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc721UpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc721UpgradeableABI, 'approve', TMode>({
    abi: erc721UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721UpgradeableSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof erc721UpgradeableABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721UpgradeableABI,
    'safeTransferFrom',
    TMode
  >({
    abi: erc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721UpgradeableSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof erc721UpgradeableABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721UpgradeableABI,
    'setApprovalForAll',
    TMode
  >({
    abi: erc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721UpgradeableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc721UpgradeableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721UpgradeableABI, 'transferFrom', TMode>({
    abi: erc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function usePrepareErc721UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721UpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721UpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721UpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721UpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc721UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721UpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__.
 */
export function useICommunityRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useICommunityBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"getApproved"`.
 */
export function useICommunityGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useICommunityIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"membershipDeposit"`.
 */
export function useICommunityMembershipDeposit<
  TFunctionName extends 'membershipDeposit',
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    functionName: 'membershipDeposit',
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"membershipVotesThreshold"`.
 */
export function useICommunityMembershipVotesThreshold<
  TFunctionName extends 'membershipVotesThreshold',
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    functionName: 'membershipVotesThreshold',
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useICommunityOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"pastReputationOf"`.
 */
export function useICommunityPastReputationOf<
  TFunctionName extends 'pastReputationOf',
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    functionName: 'pastReputationOf',
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"reputationOf"`.
 */
export function useICommunityReputationOf<
  TFunctionName extends 'reputationOf',
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    functionName: 'reputationOf',
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"rulesURI"`.
 */
export function useICommunityRulesUri<
  TFunctionName extends 'rulesURI',
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    functionName: 'rulesURI',
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useICommunitySupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"totalPastReputation"`.
 */
export function useICommunityTotalPastReputation<
  TFunctionName extends 'totalPastReputation',
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    functionName: 'totalPastReputation',
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"totalReputation"`.
 */
export function useICommunityTotalReputation<
  TFunctionName extends 'totalReputation',
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    functionName: 'totalReputation',
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"votingDuration"`.
 */
export function useICommunityVotingDuration<
  TFunctionName extends 'votingDuration',
  TSelectData = ReadContractResult<typeof iCommunityABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityABI,
    functionName: 'votingDuration',
    ...config,
  } as UseContractReadConfig<typeof iCommunityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCommunityABI}__.
 */
export function useICommunityWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iCommunityABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iCommunityABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iCommunityABI, TFunctionName, TMode>({
    abi: iCommunityABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"applyForMembership"`.
 */
export function useICommunityApplyForMembership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iCommunityABI,
          'applyForMembership'
        >['request']['abi'],
        'applyForMembership',
        TMode
      > & { functionName?: 'applyForMembership' }
    : UseContractWriteConfig<
        typeof iCommunityABI,
        'applyForMembership',
        TMode
      > & {
        abi?: never
        functionName?: 'applyForMembership'
      } = {} as any,
) {
  return useContractWrite<typeof iCommunityABI, 'applyForMembership', TMode>({
    abi: iCommunityABI,
    functionName: 'applyForMembership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"approve"`.
 */
export function useICommunityApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iCommunityABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof iCommunityABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof iCommunityABI, 'approve', TMode>({
    abi: iCommunityABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"delegateReputation"`.
 */
export function useICommunityDelegateReputation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iCommunityABI,
          'delegateReputation'
        >['request']['abi'],
        'delegateReputation',
        TMode
      > & { functionName?: 'delegateReputation' }
    : UseContractWriteConfig<
        typeof iCommunityABI,
        'delegateReputation',
        TMode
      > & {
        abi?: never
        functionName?: 'delegateReputation'
      } = {} as any,
) {
  return useContractWrite<typeof iCommunityABI, 'delegateReputation', TMode>({
    abi: iCommunityABI,
    functionName: 'delegateReputation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"initialize"`.
 */
export function useICommunityInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iCommunityABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof iCommunityABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof iCommunityABI, 'initialize', TMode>({
    abi: iCommunityABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"revokeReputation"`.
 */
export function useICommunityRevokeReputation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iCommunityABI,
          'revokeReputation'
        >['request']['abi'],
        'revokeReputation',
        TMode
      > & { functionName?: 'revokeReputation' }
    : UseContractWriteConfig<
        typeof iCommunityABI,
        'revokeReputation',
        TMode
      > & {
        abi?: never
        functionName?: 'revokeReputation'
      } = {} as any,
) {
  return useContractWrite<typeof iCommunityABI, 'revokeReputation', TMode>({
    abi: iCommunityABI,
    functionName: 'revokeReputation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useICommunitySafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iCommunityABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof iCommunityABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof iCommunityABI, 'safeTransferFrom', TMode>({
    abi: iCommunityABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useICommunitySetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iCommunityABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof iCommunityABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof iCommunityABI, 'setApprovalForAll', TMode>({
    abi: iCommunityABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"startMembership"`.
 */
export function useICommunityStartMembership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iCommunityABI,
          'startMembership'
        >['request']['abi'],
        'startMembership',
        TMode
      > & { functionName?: 'startMembership' }
    : UseContractWriteConfig<typeof iCommunityABI, 'startMembership', TMode> & {
        abi?: never
        functionName?: 'startMembership'
      } = {} as any,
) {
  return useContractWrite<typeof iCommunityABI, 'startMembership', TMode>({
    abi: iCommunityABI,
    functionName: 'startMembership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useICommunityTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iCommunityABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof iCommunityABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof iCommunityABI, 'transferFrom', TMode>({
    abi: iCommunityABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"withdrawUnusedDeposit"`.
 */
export function useICommunityWithdrawUnusedDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iCommunityABI,
          'withdrawUnusedDeposit'
        >['request']['abi'],
        'withdrawUnusedDeposit',
        TMode
      > & { functionName?: 'withdrawUnusedDeposit' }
    : UseContractWriteConfig<
        typeof iCommunityABI,
        'withdrawUnusedDeposit',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawUnusedDeposit'
      } = {} as any,
) {
  return useContractWrite<typeof iCommunityABI, 'withdrawUnusedDeposit', TMode>(
    {
      abi: iCommunityABI,
      functionName: 'withdrawUnusedDeposit',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCommunityABI}__.
 */
export function usePrepareICommunityWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCommunityABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCommunityABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCommunityABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"applyForMembership"`.
 */
export function usePrepareICommunityApplyForMembership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCommunityABI, 'applyForMembership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCommunityABI,
    functionName: 'applyForMembership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCommunityABI,
    'applyForMembership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareICommunityApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCommunityABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCommunityABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCommunityABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"delegateReputation"`.
 */
export function usePrepareICommunityDelegateReputation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCommunityABI, 'delegateReputation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCommunityABI,
    functionName: 'delegateReputation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCommunityABI,
    'delegateReputation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareICommunityInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCommunityABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCommunityABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCommunityABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"revokeReputation"`.
 */
export function usePrepareICommunityRevokeReputation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCommunityABI, 'revokeReputation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCommunityABI,
    functionName: 'revokeReputation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCommunityABI, 'revokeReputation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareICommunitySafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCommunityABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCommunityABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCommunityABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareICommunitySetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCommunityABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCommunityABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCommunityABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"startMembership"`.
 */
export function usePrepareICommunityStartMembership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCommunityABI, 'startMembership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCommunityABI,
    functionName: 'startMembership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCommunityABI, 'startMembership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareICommunityTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCommunityABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCommunityABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCommunityABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCommunityABI}__ and `functionName` set to `"withdrawUnusedDeposit"`.
 */
export function usePrepareICommunityWithdrawUnusedDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCommunityABI,
      'withdrawUnusedDeposit'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCommunityABI,
    functionName: 'withdrawUnusedDeposit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCommunityABI,
    'withdrawUnusedDeposit'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCommunityABI}__.
 */
export function useICommunityEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iCommunityABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCommunityABI,
    ...config,
  } as UseContractEventConfig<typeof iCommunityABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCommunityABI}__ and `eventName` set to `"Approval"`.
 */
export function useICommunityApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof iCommunityABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCommunityABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof iCommunityABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCommunityABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useICommunityApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof iCommunityABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCommunityABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof iCommunityABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCommunityABI}__ and `eventName` set to `"Transfer"`.
 */
export function useICommunityTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iCommunityABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCommunityABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof iCommunityABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityFactoryABI}__.
 */
export function useICommunityFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iCommunityFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCommunityFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof iCommunityFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCommunityFactoryABI}__ and `functionName` set to `"treasury"`.
 */
export function useICommunityFactoryTreasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<typeof iCommunityFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCommunityFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCommunityFactoryABI,
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<
    typeof iCommunityFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCommunityFactoryABI}__.
 */
export function useICommunityFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iCommunityFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iCommunityFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iCommunityFactoryABI, TFunctionName, TMode>({
    abi: iCommunityFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCommunityFactoryABI}__ and `functionName` set to `"createCommunity"`.
 */
export function useICommunityFactoryCreateCommunity<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iCommunityFactoryABI,
          'createCommunity'
        >['request']['abi'],
        'createCommunity',
        TMode
      > & { functionName?: 'createCommunity' }
    : UseContractWriteConfig<
        typeof iCommunityFactoryABI,
        'createCommunity',
        TMode
      > & {
        abi?: never
        functionName?: 'createCommunity'
      } = {} as any,
) {
  return useContractWrite<
    typeof iCommunityFactoryABI,
    'createCommunity',
    TMode
  >({
    abi: iCommunityFactoryABI,
    functionName: 'createCommunity',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCommunityFactoryABI}__.
 */
export function usePrepareICommunityFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCommunityFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCommunityFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCommunityFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCommunityFactoryABI}__ and `functionName` set to `"createCommunity"`.
 */
export function usePrepareICommunityFactoryCreateCommunity(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCommunityFactoryABI,
      'createCommunity'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCommunityFactoryABI,
    functionName: 'createCommunity',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCommunityFactoryABI,
    'createCommunity'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataUpgradeableGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataUpgradeableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataUpgradeableOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataUpgradeableTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc721MetadataUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: ierc721MetadataUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataUpgradeableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof ierc721MetadataUpgradeableABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721MetadataUpgradeableABI,
    'approve',
    TMode
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataUpgradeableSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof ierc721MetadataUpgradeableABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721MetadataUpgradeableABI,
    'safeTransferFrom',
    TMode
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataUpgradeableSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof ierc721MetadataUpgradeableABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721MetadataUpgradeableABI,
    'setApprovalForAll',
    TMode
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataUpgradeableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc721MetadataUpgradeableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721MetadataUpgradeableABI,
    'transferFrom',
    TMode
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function usePrepareIerc721MetadataUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataUpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataUpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataUpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ierc721MetadataUpgradeableABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof ierc721MetadataUpgradeableABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721UpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721UpgradeableGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721UpgradeableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721UpgradeableOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721UpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc721UpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721UpgradeableABI, TFunctionName, TMode>({
    abi: ierc721UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721UpgradeableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc721UpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721UpgradeableABI, 'approve', TMode>({
    abi: ierc721UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721UpgradeableSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof ierc721UpgradeableABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721UpgradeableABI,
    'safeTransferFrom',
    TMode
  >({
    abi: ierc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721UpgradeableSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof ierc721UpgradeableABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721UpgradeableABI,
    'setApprovalForAll',
    TMode
  >({
    abi: ierc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721UpgradeableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc721UpgradeableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721UpgradeableABI, 'transferFrom', TMode>({
    abi: ierc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function usePrepareIerc721UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721UpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721UpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721UpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721UpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721UpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721UpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721UpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function useIerc721ReceiverUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ReceiverUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc721ReceiverUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721ReceiverUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: ierc721ReceiverUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverUpgradeableOnErc721Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ReceiverUpgradeableABI,
          'onERC721Received'
        >['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        typeof ierc721ReceiverUpgradeableABI,
        'onERC721Received',
        TMode
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721ReceiverUpgradeableABI,
    'onERC721Received',
    TMode
  >({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function usePrepareIerc721ReceiverUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverUpgradeableOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverUpgradeableABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverUpgradeableABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    ...config,
  } as UseContractEventConfig<typeof initializableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof initializableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'renounceOwnership', TMode>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'transferOwnership', TMode>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}
